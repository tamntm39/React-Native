{"ast":null,"code":"var _jsxFileName = \"D:\\\\StudyCode\\\\my-app\\\\src\\\\components\\\\tictactoe\\\\Game.js\",\n  _s = $RefreshSig$();\n// import React, { useReducer, useState } from \"react\";\n// import { calculateWinner } from \"../../helpers\";\n// import Board from \"./Board\";\n// import \"./GameStyles.css\";\n// //gtri khoi tao \n// const initialState = {\n//   board: Array(9).fill(null),\n//   xIsNext: true,\n// };\n// const gameReducer = (state, action) => {\n//     switch (action.type) {\n//         case 'CLICK':\n//             const {board, setBoard} = state;\n//             const {index, winner} = action.payload();\n//             if(winner || board[index]) return;\n//             const nextState = JSON.parse(JSON.stringify(state));\n//             return nextState;\n//             break;\n\n//         default:\n//             break;\n//     }\n//   return state;\n// };\n// const Game = () => {\n// //   const [board, setBoard] = useState(Array(9).fill(null));\n// //   const [xIsNext, setXIsNext] = useState(true);\n\n//   //useReducer\n//   const [state, dispatch] = useReducer(gameReducer, initialState);\n//   //const action = {type: 'CLICK', payload:{}}\n//   //dispatch({type: 'CLICK'})\n//   //   const [state, setState] = useState({\n//   //     board: Array(9).fill(null),\n//   //     xIsNext: true,\n//   //     name: \"tam\",\n//   //   })\n\n//   const winner = calculateWinner(state.board);\n//   const handleClick = (index) => {\n//     // const boardCopy = [...state.board];\n//     // if (winner || boardCopy[index]) return;\n//     dispatch({\n//       type: \"CLICK\",\n//       payload: {\n//         index,\n//         winner,\n//       },\n//     });\n// //     boardCopy[index] = xIsNext ? \"X\" : \"O\";\n// //     setBoard(boardCopy);\n// //     setXIsNext(!xIsNext);\n//   };\n//   const handleResetGame = () => {\n//     dispatch({\n//         type: 'RESET',\n//     })\n//     // setBoard(Array(9).fill(null));\n//     // setXIsNext(true);\n//   };\n//   return (\n//     <div>\n//       <Board cells={state.board} onClick={handleClick}></Board>\n//       {winner && <div className=\"game-winner\">Winner is {winner}</div>}\n//       <button className=\"game-reset\" onClick={handleResetGame}>\n//         Reset game\n//       </button>\n//     </div>\n//   );\n// };\n\n// export default Game;\nimport React, { useState } from \"react\";\nimport { calculateWinner } from \"../../helpers\";\nimport Board from \"./Board\";\nimport \"\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Game = () => {\n  _s();\n  const [board, setBoard] = useState(Array(9).fill(null));\n  const [xIsNext, setXIsNext] = useState(true);\n  const winner = calculateWinner(board);\n  const handleClick = index => {\n    const boardCopy = [...board];\n    if (winner || boardCopy[index]) return;\n    boardCopy[index] = xIsNext ? \"X\" : \"O\";\n    setBoard(boardCopy);\n    setXIsNext(!xIsNext);\n  };\n  const handleResetGame = () => {\n    setBoard(Array(9).fill(null));\n    setXIsNext(true);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Board, {\n      cells: board,\n      onClick: handleClick\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this), winner && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-winner\",\n      children: [\"Winner is \", winner]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 18\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"game-reset\",\n      onClick: handleResetGame,\n      children: \"Reset game\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 95,\n    columnNumber: 5\n  }, this);\n};\n_s(Game, \"znBF1eYeJNOReqN4BeETvwkOe4A=\");\n_c = Game;\nexport default Game;\nvar _c;\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"names":["React","useState","calculateWinner","Board","jsxDEV","_jsxDEV","Game","_s","board","setBoard","Array","fill","xIsNext","setXIsNext","winner","handleClick","index","boardCopy","handleResetGame","children","cells","onClick","fileName","_jsxFileName","lineNumber","columnNumber","className","_c","$RefreshReg$"],"sources":["D:/StudyCode/my-app/src/components/tictactoe/Game.js"],"sourcesContent":["// import React, { useReducer, useState } from \"react\";\r\n// import { calculateWinner } from \"../../helpers\";\r\n// import Board from \"./Board\";\r\n// import \"./GameStyles.css\";\r\n// //gtri khoi tao \r\n// const initialState = {\r\n//   board: Array(9).fill(null),\r\n//   xIsNext: true,\r\n// };\r\n// const gameReducer = (state, action) => {\r\n//     switch (action.type) {\r\n//         case 'CLICK':\r\n//             const {board, setBoard} = state;\r\n//             const {index, winner} = action.payload();\r\n//             if(winner || board[index]) return;\r\n//             const nextState = JSON.parse(JSON.stringify(state));\r\n//             return nextState;\r\n//             break;\r\n    \r\n//         default:\r\n//             break;\r\n//     }\r\n//   return state;\r\n// };\r\n// const Game = () => {\r\n// //   const [board, setBoard] = useState(Array(9).fill(null));\r\n// //   const [xIsNext, setXIsNext] = useState(true);\r\n\r\n//   //useReducer\r\n//   const [state, dispatch] = useReducer(gameReducer, initialState);\r\n//   //const action = {type: 'CLICK', payload:{}}\r\n//   //dispatch({type: 'CLICK'})\r\n//   //   const [state, setState] = useState({\r\n//   //     board: Array(9).fill(null),\r\n//   //     xIsNext: true,\r\n//   //     name: \"tam\",\r\n//   //   })\r\n\r\n//   const winner = calculateWinner(state.board);\r\n//   const handleClick = (index) => {\r\n//     // const boardCopy = [...state.board];\r\n//     // if (winner || boardCopy[index]) return;\r\n//     dispatch({\r\n//       type: \"CLICK\",\r\n//       payload: {\r\n//         index,\r\n//         winner,\r\n//       },\r\n//     });\r\n// //     boardCopy[index] = xIsNext ? \"X\" : \"O\";\r\n// //     setBoard(boardCopy);\r\n// //     setXIsNext(!xIsNext);\r\n//   };\r\n//   const handleResetGame = () => {\r\n//     dispatch({\r\n//         type: 'RESET',\r\n//     })\r\n//     // setBoard(Array(9).fill(null));\r\n//     // setXIsNext(true);\r\n//   };\r\n//   return (\r\n//     <div>\r\n//       <Board cells={state.board} onClick={handleClick}></Board>\r\n//       {winner && <div className=\"game-winner\">Winner is {winner}</div>}\r\n//       <button className=\"game-reset\" onClick={handleResetGame}>\r\n//         Reset game\r\n//       </button>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default Game;\r\nimport React, { useState } from \"react\";\r\nimport { calculateWinner } from \"../../helpers\";\r\nimport Board from \"./Board\";\r\nimport \"\";\r\n\r\nconst Game = () => {\r\n  const [board, setBoard] = useState(Array(9).fill(null));\r\n  const [xIsNext, setXIsNext] = useState(true);\r\n\r\n  const winner = calculateWinner(board);\r\n  const handleClick = (index) => {\r\n    const boardCopy = [...board];\r\n    if (winner || boardCopy[index]) return;\r\n    boardCopy[index] = xIsNext ? \"X\" : \"O\";\r\n    setBoard(boardCopy);\r\n    setXIsNext(!xIsNext);\r\n  };\r\n  const handleResetGame = () => {\r\n    setBoard(Array(9).fill(null));\r\n    setXIsNext(true);\r\n  };\r\n  return (\r\n    <div>\r\n      <Board cells={board} onClick={handleClick}></Board>\r\n      {winner && <div className=\"game-winner\">Winner is {winner}</div>}\r\n      <button className=\"game-reset\" onClick={handleResetGame}>\r\n        Reset game\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Game;\r\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,eAAe,QAAQ,eAAe;AAC/C,OAAOC,KAAK,MAAM,SAAS;AAC3B,OAAO,EAAE;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEV,MAAMC,IAAI,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACjB,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGR,QAAQ,CAACS,KAAK,CAAC,CAAC,CAAC,CAACC,IAAI,CAAC,IAAI,CAAC,CAAC;EACvD,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGZ,QAAQ,CAAC,IAAI,CAAC;EAE5C,MAAMa,MAAM,GAAGZ,eAAe,CAACM,KAAK,CAAC;EACrC,MAAMO,WAAW,GAAIC,KAAK,IAAK;IAC7B,MAAMC,SAAS,GAAG,CAAC,GAAGT,KAAK,CAAC;IAC5B,IAAIM,MAAM,IAAIG,SAAS,CAACD,KAAK,CAAC,EAAE;IAChCC,SAAS,CAACD,KAAK,CAAC,GAAGJ,OAAO,GAAG,GAAG,GAAG,GAAG;IACtCH,QAAQ,CAACQ,SAAS,CAAC;IACnBJ,UAAU,CAAC,CAACD,OAAO,CAAC;EACtB,CAAC;EACD,MAAMM,eAAe,GAAGA,CAAA,KAAM;IAC5BT,QAAQ,CAACC,KAAK,CAAC,CAAC,CAAC,CAACC,IAAI,CAAC,IAAI,CAAC,CAAC;IAC7BE,UAAU,CAAC,IAAI,CAAC;EAClB,CAAC;EACD,oBACER,OAAA;IAAAc,QAAA,gBACEd,OAAA,CAACF,KAAK;MAACiB,KAAK,EAAEZ,KAAM;MAACa,OAAO,EAAEN;IAAY;MAAAO,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,EAClDX,MAAM,iBAAIT,OAAA;MAAKqB,SAAS,EAAC,aAAa;MAAAP,QAAA,GAAC,YAAU,EAACL,MAAM;IAAA;MAAAQ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,eAChEpB,OAAA;MAAQqB,SAAS,EAAC,YAAY;MAACL,OAAO,EAAEH,eAAgB;MAAAC,QAAA,EAAC;IAEzD;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACN,CAAC;AAEV,CAAC;AAAClB,EAAA,CAzBID,IAAI;AAAAqB,EAAA,GAAJrB,IAAI;AA2BV,eAAeA,IAAI;AAAC,IAAAqB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}